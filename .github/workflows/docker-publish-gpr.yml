name: Publish Docker Image (GPR)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: doctor-server/tf2-dedicated-server

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          df -h
          sudo rm -rf /usr/local/lib/android || true
          df -h
          sudo rm -rf /usr/share/dotnet || true
          df -h
          sudo apt-get remove -y google-cloud-sdk --fix-missing || echo "::debug::The command [sudo apt-get remove -y google-cloud-sdk --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y google-cloud-cli --fix-missing || echo "::debug::The command [sudo apt-get remove -y google-cloud-cli --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get autoremove -y || echo "::warning::The command [sudo apt-get autoremove -y] failed to complete successfully. Proceeding..."
          sudo apt-get clean || echo "::warning::The command [sudo apt-get clean] failed to complete successfully. Proceeding..."
          df -h

      - name: Fetch JSON file
        run: curl -s https://raw.githubusercontent.com/WindowsGSM/SteamAppInfo/refs/heads/main/AppInfo/232250.json -o appinfo.json

      - name: Extract Remote buildid
        id: remote-buildid
        run: |
          remote_buildid=$(jq -r '.depots.branches.public.buildid' appinfo.json)
          echo "remote_buildid=${remote_buildid}" >> $GITHUB_ENV

      - name: Check if tag exists
        id: tag-exists
        run: |
          if docker pull ghcr.io/doctor-server/tf2-dedicated-server:${{ env.remote_buildid }}; then
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        if: env.exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: env.exists == 'false'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: env.exists == 'false'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build Docker image
        if: env.exists == 'false'
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:latest

      - name: Run local buildid script
        if: env.exists == 'false'
        id: local-buildid
        run: |
          local_buildid=$(docker run --rm ${{ env.IMAGE_NAME }}:latest sh -c local_buildid.sh)
          echo "local_buildid=${local_buildid}" >> $GITHUB_ENV

      - name: Compare build IDs
        if: env.exists == 'false'
        run: |
          if [ "${{ env.local_buildid }}" != "${{ env.remote_buildid }}" ]; then
            echo "Local build ID does not match remote build ID. Failing the job."
            exit 1
          fi

      - name: Push Docker image
        if: env.exists == 'false' && env.local_buildid == env.remote_buildid
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.remote_buildid }}
          labels: ${{ steps.meta.outputs.labels }}
