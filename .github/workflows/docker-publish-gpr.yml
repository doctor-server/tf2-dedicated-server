name: Publish Docker Image (GPR)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: doctor-server/tf2-dedicated-server

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          df -h
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /usr/share/dotnet || true
          df -h

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run remote_buildid.py and save output
        id: remote-buildid
        run: |
          remote_buildid=$(python remote_buildid.py)
          echo "remote_buildid=$remote_buildid" >> $GITHUB_ENV

      - name: Check if tag exists
        id: tag-exists
        run: |
          if docker pull ghcr.io/doctor-server/tf2-dedicated-server:${{ env.remote_buildid }}; then
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        if: env.exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: env.exists == 'false'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: env.exists == 'false'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Push Docker image
        if: env.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.remote_buildid }}
          build-args: |
            remote_buildid=${{ env.remote_buildid }}
